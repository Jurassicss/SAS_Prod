'use client';

import styles from './CreateProductForm.module.scss';
import { useEffect, useState } from 'react';

export default function CreateProductPage() {
	const [selectedProductId, setSelectedProductId] = useState('');

	const [selectedProduct, setSelectedProduct] = useState(null);
	const [products, setProducts] = useState([]);
	const [quantity, setQuantity] = useState(1);
	const [customer, setCustomer] = useState('');
	const [printKTP, setPrintKTP] = useState(false);
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [error, setError] = useState('');

	useEffect(() => {
		fetch('/api/essence/start')
			.then(res => res.json())
			.then(setProducts)
			.catch(() => setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã'));
	}, []);

	const isValid = () =>
		selectedProduct &&
		customer.trim() &&
		Number.isInteger(+quantity) &&
		+quantity >= 1;

	const handleSubmit = async () => {
		if (!isValid()) {
			setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
			return;
		}

		setIsSubmitting(true);
		setError('');

		const res = await fetch('/api/start', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({
				id_product: selectedProduct.id,
				label: selectedProduct.label, // –µ—Å–ª–∏ –Ω–∞–¥–æ
				quantity: parseInt(quantity),
				customer,
				printKTP,
			}),
		});

		const data = await res.json();

		if (!res.ok) {
			setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞');
		} else {
			alert(`${data.count} –ø—Ä–æ–¥—É–∫—Ç(–æ–≤) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ`);
			setSelectedProductId('');
			setQuantity(1);
			setCustomer('');
			setPrintKTP(false);
		}

		setIsSubmitting(false);
	};

	return (
		<div className={styles.container}>
			<h1 className={styles.title}>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</h1>

			<select
				className={styles.input}
				value={selectedProduct ? selectedProduct.id : ''}
				onChange={e => {
					const prod = products.find(p => p.id === parseInt(e.target.value));
					setSelectedProduct(prod);
				}}
			>
				<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é</option>
				{products.map(p => (
					<option key={p.id} value={p.id}>
						{p.label}
					</option>
				))}
			</select>

			<input
				className={styles.input}
				type="number"
				placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π"
				min="1"
				value={quantity}
				onChange={e => setQuantity(e.target.value)}
			/>

			<input
				className={styles.input}
				type="text"
				placeholder="–ó–∞–∫–∞–∑—á–∏–∫"
				value={customer}
				onChange={e => setCustomer(e.target.value)}
			/>

			<label className={styles.checkboxLabel}>
				<input
					type="checkbox"
					checked={printKTP}
					onChange={e => setPrintKTP(e.target.checked)}
				/>
				üìÑ –†–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –ö–¢–ü
			</label>

			<button
				className={styles.button}
				onClick={handleSubmit}
				disabled={!isValid() || isSubmitting}
			>
				–°–æ–∑–¥–∞—Ç—å
			</button>

			{error && <p className={styles.error}>{error}</p>}
		</div>
	);
}
