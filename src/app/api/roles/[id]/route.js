import { NextResponse } from 'next/server';
import { createTunnelAndConnect } from '@/lib/dbViaSsh';

export async function DELETE(req, { params }) {
	const { id: id_roles } = params;

	if (!id_roles) {
		return NextResponse.json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 400 });
	}

	let client;
	try {
		client = await createTunnelAndConnect();

		// üß† –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Ä–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
		const usageCheckQuery = `SELECT COUNT(*) FROM hr.users WHERE roles = $1;`;
		const usageResult = await client.pgClient.query(usageCheckQuery, [parseInt(id_roles)]);
		const usageCount = parseInt(usageResult.rows[0].count);

		if (usageCount > 0) {
			await client.close();
			return NextResponse.json({
				error: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.`,
			}, { status: 409 }); // 409 Conflict ‚Äî –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Å–º—ã—Å–ª—É
		}

		const deleteQuery = `DELETE FROM hr.roles WHERE id_roles = $1 RETURNING *;`;
		const { rows } = await client.pgClient.query(deleteQuery, [parseInt(id_roles)]);

		await client.close();

		if (rows.length === 0) {
			return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
		}

		return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
	} catch (error) {
		console.error(error);
		if (client) await client.close();
		return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
	}
}
